var RiseVision=RiseVision||{};if(RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Validation=function(){"use strict";function t(t,e){var n=t.value.trim();return o.test(n)?parseFloat(n)>parseFloat(e):!1}function e(t,e){var n=t.value.trim();return o.test(n)?parseFloat(n)<parseFloat(e):!1}function n(t){var e=t.value.trim();return a.test(e)}function i(t){var e=t.value.trim(),n=!1;return"checkbox"===t.type||"radio"===t.type?t.checked===!0&&(n=!0):null!==e&&""!==e&&(n=!0),n}function s(t){var e=t.value.trim();return-1===e.indexOf("://")&&(e="http://"+e),r.test(e)}var r=/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/i,a=/^(\-|\+)?([0-9]+|Infinity)$/,o=/^\-?[0-9]*\.?[0-9]+$/;return{isGreaterThan:t,isLessThan:e,isValidRequired:i,isValidURL:s,isValidNumber:n}}(),RiseVision.Common.Utilities=function(){function t(t,e){var n="font-family:"+e.font.family+"; ",i="color: "+e.color+"; ",s="font-size: "+e.size+"px; ",r="font-weight: "+(e.bold?"bold":"normal")+"; ",a="font-style: "+(e.italic?"italic":"normal")+"; ",o="text-decoration: "+(e.underline?"underline":"none")+"; ",u="background-color: "+e.highlightColor+"; ";return"."+t+" {"+n+i+s+r+a+o+u+"}"}function e(t){for(var e=document.createElement("style"),n=0,i=t.length;i>n;n++)e.appendChild(document.createTextNode(t[n]));document.head.appendChild(e)}function n(n,r){n.forEach(function(n){n.class&&n.fontSetting&&e([t(n.class,n.fontSetting)]),n.fontSetting.font.type&&("custom"===n.fontSetting.font.type&&n.fontSetting.font.family&&n.fontSetting.font.url?i(n.fontSetting.font.family,n.fontSetting.font.url,r):"google"===n.fontSetting.font.type&&n.fontSetting.font.family&&s(n.fontSetting.font.family,r))})}function i(t,e,n){var i=null,s="font-family: "+t+"; src: url('"+e+"');";n=n||document,i=n.styleSheets[0],null!==i&&i.addRule("@font-face",s)}function s(t,e){var n=document.createElement("link");e=e||document,n.setAttribute("rel","stylesheet"),n.setAttribute("type","text/css"),n.setAttribute("href","https://fonts.googleapis.com/css?family="+t),null!==n&&e.getElementsByTagName("head")[0].appendChild(n)}return{getFontCssStyle:t,addCSSRules:e,loadFonts:n,loadCustomFont:i,loadGoogleFont:s}}(),function(){"use strict";var root=this,timezoneJS={};"function"==typeof define&&define.amd?define(function(){return timezoneJS}):"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=timezoneJS),exports.timezoneJS=timezoneJS):root.timezoneJS=timezoneJS,timezoneJS.VERSION="0.4.13";for(var ajax_lib=root.$||root.jQuery||root.Zepto,fleegix=root.fleegix,DAYS=timezoneJS.Days=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],MONTHS=timezoneJS.Months=["January","February","March","April","May","June","July","August","September","October","November","December"],SHORT_MONTHS={},SHORT_DAYS={},EXACT_DATE_TIME={},i=0;i<MONTHS.length;i++)SHORT_MONTHS[MONTHS[i].substr(0,3)]=i;for(i=0;i<DAYS.length;i++)SHORT_DAYS[DAYS[i].substr(0,3)]=i;var _arrIndexOf=Array.prototype.indexOf||function(t){if(null===this)throw new TypeError;var e=Object(this),n=e.length>>>0;if(0===n)return-1;var i=0;if(arguments.length>1&&(i=Number(arguments[1]),i!=i?i=0:0!==i&&1/0!==i&&i!==-1/0&&(i=(i>0||-1)*Math.floor(Math.abs(i)))),i>=n)return-1;for(var s=i>=0?i:Math.max(n-Math.abs(i),0);n>s;s++)if(s in e&&e[s]===t)return s;return-1},_fixWidth=function(t,e){if("number"!=typeof t)throw"not a number: "+t;var n=t>1e3,i=t.toString(),s=i.length;if(n&&s>e)return i.substr(s-e,s);for(i=[i];e>s;)i.unshift("0"),s++;return i.join("")},_transport=function(t){if(t){if(!t.url)throw new Error("URL must be specified");if("async"in t||(t.async=!0),"undefined"==typeof window&&"function"==typeof require){var e=require("fs");if(t.async){if("function"!=typeof t.success)return;return t.error=t.error||console.error,e.readFile(t.url,"utf8",function(e,n){return e?t.error(e):t.success(n)})}return e.readFileSync(t.url,"utf8")}if(!(fleegix&&"undefined"!=typeof fleegix.xhr||ajax_lib&&"undefined"!=typeof ajax_lib.ajax))throw new Error("Please use the Fleegix.js XHR module, jQuery ajax, Zepto ajax, or define your own transport mechanism for downloading zone files.");return t.async?fleegix&&fleegix.xhr?fleegix.xhr.send({url:t.url,method:"get",handleSuccess:t.success,handleErr:t.error}):ajax_lib.ajax({url:t.url,dataType:"text",method:"GET",error:t.error,success:t.success}):fleegix&&fleegix.xhr?fleegix.xhr.doReq({url:t.url,async:!1}):ajax_lib.ajax({url:t.url,async:!1,dataType:"text"}).responseText}};timezoneJS.Date=function(){if(this===timezoneJS)throw"timezoneJS.Date object must be constructed with 'new'";var t=Array.prototype.slice.apply(arguments),e=null,n=null,i=[],s=!1;"[object Array]"===Object.prototype.toString.call(t[0])&&(t=t[0]),"string"==typeof t[t.length-1]&&(s=Date.parse(t[t.length-1].replace(/GMT[\+\-]\d+/,"")),(isNaN(s)||null===s)&&(n=t.pop()));var r=!1;switch(t.length){case 0:e=new Date;break;case 1:e=new Date(t[0]),"string"==typeof t[0]&&-1==t[0].search(/[+-][0-9]{4}/)&&-1==t[0].search(/Z/)&&-1==t[0].search(/T/)&&(r=!0);break;case 2:e=new Date(t[0],t[1]),r=!0;break;default:for(var a=0;7>a;a++)i[a]=t[a]||0;e=new Date(i[0],i[1],i[2],i[3],i[4],i[5],i[6]),r=!0}this._useCache=!1,this._tzInfo={},this._day=0,this.year=0,this.month=0,this.date=0,this.hours=0,this.minutes=0,this.seconds=0,this.milliseconds=0,this.timezone=n||null,r?this.setFromDateObjProxy(e):this.setFromTimeProxy(e.getTime(),n)},timezoneJS.Date.prototype={getDate:function(){return this.date},getDay:function(){return this._day},getFullYear:function(){return this.year},getMonth:function(){return this.month},getYear:function(){return this.year-1900},getHours:function(){return this.hours},getMilliseconds:function(){return this.milliseconds},getMinutes:function(){return this.minutes},getSeconds:function(){return this.seconds},getUTCDate:function(){return this.getUTCDateProxy().getUTCDate()},getUTCDay:function(){return this.getUTCDateProxy().getUTCDay()},getUTCFullYear:function(){return this.getUTCDateProxy().getUTCFullYear()},getUTCHours:function(){return this.getUTCDateProxy().getUTCHours()},getUTCMilliseconds:function(){return this.getUTCDateProxy().getUTCMilliseconds()},getUTCMinutes:function(){return this.getUTCDateProxy().getUTCMinutes()},getUTCMonth:function(){return this.getUTCDateProxy().getUTCMonth()},getUTCSeconds:function(){return this.getUTCDateProxy().getUTCSeconds()},getTime:function(){return this._timeProxy+60*this.getTimezoneOffset()*1e3},getTimezone:function(){return this.timezone},getTimezoneOffset:function(){return this.getTimezoneInfo().tzOffset},getTimezoneAbbreviation:function(){return this.getTimezoneInfo().tzAbbr},getTimezoneInfo:function(){if(this._useCache)return this._tzInfo;var t;return t=this.timezone?"Etc/UTC"===this.timezone||"Etc/GMT"===this.timezone?{tzOffset:0,tzAbbr:"UTC"}:timezoneJS.timezone.getTzInfo(this._timeProxy,this.timezone):{tzOffset:this.getLocalOffset(),tzAbbr:null},this._tzInfo=t,this._useCache=!0,t},getUTCDateProxy:function(){var t=new Date(this._timeProxy);return t.setUTCMinutes(t.getUTCMinutes()+this.getTimezoneOffset()),t},setDate:function(t){return this.setAttribute("date",t),this.getTime()},setFullYear:function(t,e,n){return void 0!==n&&this.setAttribute("date",1),this.setAttribute("year",t),void 0!==e&&this.setAttribute("month",e),void 0!==n&&this.setAttribute("date",n),this.getTime()},setMonth:function(t,e){return this.setAttribute("month",t),void 0!==e&&this.setAttribute("date",e),this.getTime()},setYear:function(t){return t=Number(t),t>=0&&99>=t&&(t+=1900),this.setUTCAttribute("year",t),this.getTime()},setHours:function(t,e,n,i){return this.setAttribute("hours",t),void 0!==e&&this.setAttribute("minutes",e),void 0!==n&&this.setAttribute("seconds",n),void 0!==i&&this.setAttribute("milliseconds",i),this.getTime()},setMinutes:function(t,e,n){return this.setAttribute("minutes",t),void 0!==e&&this.setAttribute("seconds",e),void 0!==n&&this.setAttribute("milliseconds",n),this.getTime()},setSeconds:function(t,e){return this.setAttribute("seconds",t),void 0!==e&&this.setAttribute("milliseconds",e),this.getTime()},setMilliseconds:function(t){return this.setAttribute("milliseconds",t),this.getTime()},setTime:function(t){if(isNaN(t))throw new Error("Units must be a number.");return this.setFromTimeProxy(t,this.timezone),this.getTime()},setUTCFullYear:function(t,e,n){return void 0!==n&&this.setUTCAttribute("date",1),this.setUTCAttribute("year",t),void 0!==e&&this.setUTCAttribute("month",e),void 0!==n&&this.setUTCAttribute("date",n),this.getTime()},setUTCMonth:function(t,e){return this.setUTCAttribute("month",t),void 0!==e&&this.setUTCAttribute("date",e),this.getTime()},setUTCDate:function(t){return this.setUTCAttribute("date",t),this.getTime()},setUTCHours:function(t,e,n,i){return this.setUTCAttribute("hours",t),void 0!==e&&this.setUTCAttribute("minutes",e),void 0!==n&&this.setUTCAttribute("seconds",n),void 0!==i&&this.setUTCAttribute("milliseconds",i),this.getTime()},setUTCMinutes:function(t,e,n){return this.setUTCAttribute("minutes",t),void 0!==e&&this.setUTCAttribute("seconds",e),void 0!==n&&this.setUTCAttribute("milliseconds",n),this.getTime()},setUTCSeconds:function(t,e){return this.setUTCAttribute("seconds",t),void 0!==e&&this.setUTCAttribute("milliseconds",e),this.getTime()},setUTCMilliseconds:function(t){return this.setUTCAttribute("milliseconds",t),this.getTime()},setFromDateObjProxy:function(t){this.year=t.getFullYear(),this.month=t.getMonth(),this.date=t.getDate(),this.hours=t.getHours(),this.minutes=t.getMinutes(),this.seconds=t.getSeconds(),this.milliseconds=t.getMilliseconds(),this._day=t.getDay(),this._dateProxy=t,this._timeProxy=Date.UTC(this.year,this.month,this.date,this.hours,this.minutes,this.seconds,this.milliseconds),this._useCache=!1},setFromTimeProxy:function(t,e){var n=new Date(t),i=e?timezoneJS.timezone.getTzInfo(t,e,!0).tzOffset:n.getTimezoneOffset();n.setTime(t+6e4*(n.getTimezoneOffset()-i)),this.setFromDateObjProxy(n)},setAttribute:function(t,e){if(isNaN(e))throw new Error("Units must be a number.");var n=this._dateProxy,i="year"===t?"FullYear":t.substr(0,1).toUpperCase()+t.substr(1);n["set"+i](e),this.setFromDateObjProxy(n)},setUTCAttribute:function(t,e){if(isNaN(e))throw new Error("Units must be a number.");var n="year"===t?"FullYear":t.substr(0,1).toUpperCase()+t.substr(1),i=this.getUTCDateProxy();i["setUTC"+n](e),i.setUTCMinutes(i.getUTCMinutes()-this.getTimezoneOffset()),this.setFromTimeProxy(i.getTime()+6e4*this.getTimezoneOffset(),this.timezone)},setTimezone:function(t){var e=this.getTimezoneInfo().tzOffset;this.timezone=t,this._useCache=!1,this.setUTCMinutes(this.getUTCMinutes()-this.getTimezoneInfo().tzOffset+e)},removeTimezone:function(){this.timezone=null,this._useCache=!1},valueOf:function(){return this.getTime()},clone:function(){return this.timezone?new timezoneJS.Date(this.getTime(),this.timezone):new timezoneJS.Date(this.getTime())},toGMTString:function(){return this.toString("EEE, dd MMM yyyy HH:mm:ss Z","Etc/GMT")},toLocaleString:function(){},toLocaleDateString:function(){},toLocaleTimeString:function(){},toSource:function(){},toISOString:function(){return this.toString("yyyy-MM-ddTHH:mm:ss.SSS","Etc/UTC")+"Z"},toJSON:function(){return this.toISOString()},toDateString:function(){return this.toString("EEE MMM dd yyyy")},toTimeString:function(){return this.toString("H:mm k")},toString:function(t,e){t||(t="yyyy-MM-dd HH:mm:ss");var n=t,i=e?timezoneJS.timezone.getTzInfo(this.getTime(),e):this.getTimezoneInfo(),s=this;e&&(s=this.clone(),s.setTimezone(e));var r=s.getHours();return n.replace(/a+/g,function(){return"k"}).replace(/y+/g,function(t){return _fixWidth(s.getFullYear(),t.length)}).replace(/d+/g,function(t){return _fixWidth(s.getDate(),t.length)}).replace(/m+/g,function(t){return _fixWidth(s.getMinutes(),t.length)}).replace(/s+/g,function(t){return _fixWidth(s.getSeconds(),t.length)}).replace(/S+/g,function(t){return _fixWidth(s.getMilliseconds(),t.length)}).replace(/h+/g,function(t){return _fixWidth(r%12===0?12:r%12,t.length)}).replace(/M+/g,function(t){var e=s.getMonth(),n=t.length;return n>3?timezoneJS.Months[e]:n>2?timezoneJS.Months[e].substring(0,n):_fixWidth(e+1,n)}).replace(/k+/g,function(){return r>=12?(r>12&&(r-=12),"PM"):"AM"}).replace(/H+/g,function(t){return _fixWidth(r,t.length)}).replace(/E+/g,function(t){return DAYS[s.getDay()].substring(0,t.length)}).replace(/Z+/gi,function(){return i.tzAbbr})},toUTCString:function(){return this.toGMTString()},civilToJulianDayNumber:function(t,e,n){var i;e++,e>12&&(i=parseInt(e/12,10),e%=12,t+=i),2>=e&&(t-=1,e+=12),i=Math.floor(t/100);var s=2-i+Math.floor(i/4),r=Math.floor(365.25*(t+4716))+Math.floor(30.6001*(e+1))+n+s-1524;return r},getLocalOffset:function(){return this._dateProxy.getTimezoneOffset()}},timezoneJS.timezone=new function(){function invalidTZError(t){throw new Error("Timezone '"+t+"' is either incorrect, or not loaded in the timezone registry.")}function builtInLoadZoneFile(t,e){var n=_this.zoneFileBasePath+"/"+t;return e&&e.async?_this.transport({async:!0,url:n,success:function(t){return _this.parseZones(t)&&"function"==typeof e.callback&&e.callback()},error:function(){throw new Error("Error retrieving '"+n+"' zoneinfo files")}}):_this.parseZones(_this.transport({url:n,async:!1}))}function getRegionForTimezone(t){var e,n,i=regionExceptions[t];if(i)return i;if(e=t.split("/")[0],n=regionMap[e])return n;var s=_this.zones[t];return"string"==typeof s?getRegionForTimezone(s):_this.loadedZones.backward?(invalidTZError(t),void 0):(_this.loadZoneFile("backward"),getRegionForTimezone(t))}function parseTimeString(t){var e=/(\d+)(?::0*(\d*))?(?::0*(\d*))?([wsugz])?$/,n=t.match(e);return n[1]=parseInt(n[1],10),n[2]=n[2]?parseInt(n[2],10):0,n[3]=n[3]?parseInt(n[3],10):0,n.slice(1,5)}function processZone(t){if(t[3]){var e=parseInt(t[3],10),n=11,i=31;t[4]&&(n=SHORT_MONTHS[t[4].substr(0,3)],i=parseInt(t[5],10)||1);var s=t[6]?parseTimeString(t[6]):[0,0,0];return[e,n,i,s[0],s[1],s[2]]}}function getZone(t,e){for(var n="number"==typeof t?t:new Date(t).getTime(),i=e,s=_this.zones[i];"string"==typeof s;)i=s,s=_this.zones[i];if(!s){if(!_this.loadedZones.backward)return _this.loadZoneFile("backward"),getZone(t,e);invalidTZError(i)}if(0===s.length)throw new Error("No Zone found for '"+e+"' on "+t);for(var r=s.length-1;r>=0;r--){var a=s[r];if(a[3]&&n>a[3])break}return s[r+1]}function getBasicOffset(t){var e=parseTimeString(t),n="-"===t.charAt(0)?-1:1;return e=1e3*n*(60*(60*e[0]+e[1])+e[2]),e/60/1e3}function getAdjustedOffset(t,e){return-Math.ceil(e-t)}function getRule(t,e,n){var i="number"==typeof t?new Date(t):t,s=e[1],r=e[0],a=s.match(/^([0-9]):([0-9][0-9])$/);if(a)return[-1e6,"max","-","Jan",1,[0,0,0],60*parseInt(a[1],10)+parseInt(a[2],10),"-"];var o,u=function(t,e,n){var i=0;if("u"===e||"g"===e||"z"===e)i=0;else if("s"===e)i=r;else{if("w"!==e&&e)throw new Error("unknown type "+e);i=getAdjustedOffset(r,n[6])}return i*=6e4,new Date(t.getTime()+i)},l=function(t,e){var n,i=t[0],s=t[1],r=s[5];if(EXACT_DATE_TIME[i]||(EXACT_DATE_TIME[i]={}),EXACT_DATE_TIME[i][s])n=EXACT_DATE_TIME[i][s];else{if(isNaN(s[4])){var a,o;"last"===s[4].substr(0,4)?(n=new Date(Date.UTC(i,SHORT_MONTHS[s[3]]+1,1,r[0]-24,r[1],r[2],0)),a=SHORT_DAYS[s[4].substr(4,3)],o="<="):(n=new Date(Date.UTC(i,SHORT_MONTHS[s[3]],s[4].substr(5),r[0],r[1],r[2],0)),a=SHORT_DAYS[s[4].substr(0,3)],o=s[4].substr(3,2));var l=n.getUTCDay();">="===o?n.setUTCDate(n.getUTCDate()+(a-l+(l>a?7:0))):n.setUTCDate(n.getUTCDate()+(a-l-(a>l?7:0)))}else n=new Date(Date.UTC(i,SHORT_MONTHS[s[3]],s[4],r[0],r[1],r[2],0));EXACT_DATE_TIME[i][s]=n}return e&&(n=u(n,r[3],e)),n},c=function(t,e){for(var n=[],i=0;e&&i<e.length;i++)e[i][0]<=t&&(e[i][1]>=t||e[i][0]===t&&"only"===e[i][1]||"max"===e[i][1])&&n.push([t,e[i]]);return n},h=function(t,e,i){var s,r;return t instanceof Date?i&&(t=u(t,n?"u":"w",i)):(s=t[0],r=t[1],t=!i&&EXACT_DATE_TIME[s]&&EXACT_DATE_TIME[s][r]?EXACT_DATE_TIME[s][r]:l(t,i)),e instanceof Date?i&&(e=u(e,n?"u":"w",i)):(s=e[0],r=e[1],e=!i&&EXACT_DATE_TIME[s]&&EXACT_DATE_TIME[s][r]?EXACT_DATE_TIME[s][r]:l(e,i)),t=Number(t),e=Number(e),t-e},d=i.getUTCFullYear();o=c(d,_this.rules[s]),o.push(i),o.sort(h),_arrIndexOf.call(o,i)<2&&(o=o.concat(c(d-1,_this.rules[s])),o.sort(h));var f=_arrIndexOf.call(o,i);return f>1&&h(i,o[f-1],o[f-2][1])<0?o[f-2][1]:f>0&&f<o.length-1&&h(i,o[f+1],o[f-1][1])>0?o[f+1][1]:0===f?null:o[f-1][1]}function getAbbreviation(t,e){var n=t[2];if(n.indexOf("%s")>-1){var i;return i=e?"-"===e[7]?"":e[7]:"S",n.replace("%s",i)}return n.indexOf("/")>-1?n.split("/",2)[e?e[6]?1:0:0]:n}var _this=this,regionMap={Etc:"etcetera",EST:"northamerica",MST:"northamerica",HST:"northamerica",EST5EDT:"northamerica",CST6CDT:"northamerica",MST7MDT:"northamerica",PST8PDT:"northamerica",America:["northamerica","southamerica"],Pacific:"australasia",Atlantic:"europe",Africa:"africa",Indian:"africa",Antarctica:"antarctica",Asia:"asia",Australia:"australasia",Europe:"europe",WET:"europe",CET:"europe",MET:"europe",EET:"europe"},regionExceptions={"Pacific/Honolulu":"northamerica","Atlantic/Bermuda":"northamerica","Atlantic/Cape_Verde":"africa","Atlantic/St_Helena":"africa","Indian/Kerguelen":"antarctica","Indian/Chagos":"asia","Indian/Maldives":"asia","Indian/Christmas":"australasia","Indian/Cocos":"australasia","America/Danmarkshavn":"europe","America/Scoresbysund":"europe","America/Godthab":"europe","America/Thule":"europe","Asia/Istanbul":"europe","Asia/Yekaterinburg":"europe","Asia/Omsk":"europe","Asia/Novosibirsk":"europe","Asia/Krasnoyarsk":"europe","Asia/Irkutsk":"europe","Asia/Yakutsk":"europe","Asia/Vladivostok":"europe","Asia/Sakhalin":"europe","Asia/Magadan":"europe","Asia/Kamchatka":"europe","Asia/Anadyr":"europe","Africa/Ceuta":"europe",GMT:"etcetera","Europe/Nicosia":"asia"};this.zoneFileBasePath=null,this.zoneFiles=["africa","antarctica","asia","australasia","backward","etcetera","europe","northamerica","pacificnew","southamerica"],this.loadingSchemes={PRELOAD_ALL:"preloadAll",LAZY_LOAD:"lazyLoad",MANUAL_LOAD:"manualLoad"},this.getRegionForTimezone=getRegionForTimezone,this.loadingScheme=this.loadingSchemes.LAZY_LOAD,this.loadedZones={},this.zones={},this.rules={},this.init=function(t){var e={async:!0},n=this.loadingScheme===this.loadingSchemes.PRELOAD_ALL?this.zoneFiles:this.defaultZoneFile||"northamerica";for(var i in t)e[i]=t[i];return this.loadZoneFiles(n,e)},this.loadZoneFiles=function(t,e){var n,i=0;if("string"==typeof t)return this.loadZoneFile(t,e);e=e||{},n=e.callback,e.callback=function(){i++,i===t.length&&"function"==typeof n&&n()};for(var s=0;s<t.length;s++)this.loadZoneFile(t[s],e)},this.loadZoneFile=function(t,e){if("undefined"==typeof this.zoneFileBasePath)throw new Error("Please define a base path to your zone file directory -- timezoneJS.timezone.zoneFileBasePath.");if(!this.loadedZones[t])return this.loadedZones[t]=!0,builtInLoadZoneFile(t,e)},this.loadZoneJSONData=function(url,sync){var processData=function(data){data=eval("("+data+")");for(var z in data.zones)_this.zones[z]=data.zones[z];for(var r in data.rules)_this.rules[r]=data.rules[r]};return sync?processData(_this.transport({url:url,async:!1})):_this.transport({url:url,success:processData})},this.loadZoneDataFromObject=function(t){if(t){for(var e in t.zones)_this.zones[e]=t.zones[e];for(var n in t.rules)_this.rules[n]=t.rules[n]}},this.getAllZones=function(){var t=[];for(var e in this.zones)t.push(e);return t.sort()},this.parseZones=function(t){if(!t)return!1;for(var e,n=t.split("\n"),i=[],s="",r=null,a=null,o=0;o<n.length;o++)if(e=n[o],e.match(/^\s/)&&(e="Zone "+r+e),e=e.split("#")[0],e.length>3)switch(i=e.split(/\s+/),s=i.shift()){case"Zone":if(r=i.shift(),_this.zones[r]||(_this.zones[r]=[]),i.length<3)break;i.splice(3,i.length,processZone(i)),i[3]&&(i[3]=Date.UTC.apply(null,i[3])),i[0]=-getBasicOffset(i[0]),_this.zones[r].push(i);break;case"Rule":a=i.shift(),_this.rules[a]||(_this.rules[a]=[]),i[0]=parseInt(i[0],10),i[1]=parseInt(i[1],10)||i[1],i[5]=parseTimeString(i[5]),i[6]=getBasicOffset(i[6]),_this.rules[a].push(i);break;case"Link":if(_this.zones[i[1]])throw new Error("Error with Link "+i[1]+". Cannot create link of a preexisted zone.");_this.zones[i[1]]=isNaN(i[0])?i[0]:parseInt(i[0],10)}return!0},this.transport=_transport,this.getTzInfo=function(t,e,n){if(this.loadingScheme===this.loadingSchemes.LAZY_LOAD){var i=getRegionForTimezone(e);if(!i)throw new Error("Not a valid timezone ID.");this.loadZoneFiles(i)}var s=getZone(t,e),r=+s[0],a=getRule(t,s,n);a&&(r=getAdjustedOffset(r,a[6]));var o=getAbbreviation(s,a);return{tzOffset:r,tzAbbr:o}}}}.call("undefined"!=typeof window?window:this),function(t){function e(t,e,n){switch(arguments.length){case 2:return null!=t?t:e;case 3:return null!=t?t:null!=e?e:n;default:throw new Error("Implement me")}}function n(t,e){return Se.call(t,e)}function i(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function s(t){Te.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function r(t,e){var n=!0;return d(function(){return n&&(s(t),n=!1),e.apply(this,arguments)},e)}function a(t,e){pn[t]||(s(e),pn[t]=!0)}function o(t,e){return function(n){return _(t.call(this,n),e)}}function u(t,e){return function(n){return this.localeData().ordinal(t.call(this,n),e)}}function l(){}function c(t,e){e!==!1&&O(t),f(this,t),this._d=new Date(+t._d)}function h(t){var e=w(t),n=e.year||0,i=e.quarter||0,s=e.month||0,r=e.week||0,a=e.day||0,o=e.hour||0,u=e.minute||0,l=e.second||0,c=e.millisecond||0;this._milliseconds=+c+1e3*l+6e4*u+36e5*o,this._days=+a+7*r,this._months=+s+3*i+12*n,this._data={},this._locale=Te.localeData(),this._bubble()}function d(t,e){for(var i in e)n(e,i)&&(t[i]=e[i]);return n(e,"toString")&&(t.toString=e.toString),n(e,"valueOf")&&(t.valueOf=e.valueOf),t}function f(t,e){var n,i,s;if("undefined"!=typeof e._isAMomentObject&&(t._isAMomentObject=e._isAMomentObject),"undefined"!=typeof e._i&&(t._i=e._i),"undefined"!=typeof e._f&&(t._f=e._f),"undefined"!=typeof e._l&&(t._l=e._l),"undefined"!=typeof e._strict&&(t._strict=e._strict),"undefined"!=typeof e._tzm&&(t._tzm=e._tzm),"undefined"!=typeof e._isUTC&&(t._isUTC=e._isUTC),"undefined"!=typeof e._offset&&(t._offset=e._offset),"undefined"!=typeof e._pf&&(t._pf=e._pf),"undefined"!=typeof e._locale&&(t._locale=e._locale),Fe.length>0)for(n in Fe)i=Fe[n],s=e[i],"undefined"!=typeof s&&(t[i]=s);return t}function m(t){return 0>t?Math.ceil(t):Math.floor(t)}function _(t,e,n){for(var i=""+Math.abs(t),s=t>=0;i.length<e;)i="0"+i;return(s?n?"+":"":"-")+i}function g(t,e){var n={milliseconds:0,months:0};return n.months=e.month()-t.month()+12*(e.year()-t.year()),t.clone().add(n.months,"M").isAfter(e)&&--n.months,n.milliseconds=+e-+t.clone().add(n.months,"M"),n}function p(t,e){var n;return e=P(e,t),t.isBefore(e)?n=g(t,e):(n=g(e,t),n.milliseconds=-n.milliseconds,n.months=-n.months),n}function y(t,e){return function(n,i){var s,r;return null===i||isNaN(+i)||(a(e,"moment()."+e+"(period, number) is deprecated. Please use moment()."+e+"(number, period)."),r=n,n=i,i=r),n="string"==typeof n?+n:n,s=Te.duration(n,i),T(this,s,t),this}}function T(t,e,n,i){var s=e._milliseconds,r=e._days,a=e._months;i=null==i?!0:i,s&&t._d.setTime(+t._d+s*n),r&&fe(t,"Date",de(t,"Date")+r*n),a&&he(t,de(t,"Month")+a*n),i&&Te.updateOffset(t,r||a)}function D(t){return"[object Array]"===Object.prototype.toString.call(t)}function M(t){return"[object Date]"===Object.prototype.toString.call(t)||t instanceof Date}function v(t,e,n){var i,s=Math.min(t.length,e.length),r=Math.abs(t.length-e.length),a=0;for(i=0;s>i;i++)(n&&t[i]!==e[i]||!n&&k(t[i])!==k(e[i]))&&a++;return a+r}function b(t){if(t){var e=t.toLowerCase().replace(/(.)s$/,"$1");t=cn[t]||hn[e]||e}return t}function w(t){var e,i,s={};for(i in t)n(t,i)&&(e=b(i),e&&(s[e]=t[i]));return s}function S(e){var n,i;if(0===e.indexOf("week"))n=7,i="day";else{if(0!==e.indexOf("month"))return;n=12,i="month"}Te[e]=function(s,r){var a,o,u=Te._locale[e],l=[];if("number"==typeof s&&(r=s,s=t),o=function(t){var e=Te().utc().set(i,t);return u.call(Te._locale,e,s||"")},null!=r)return o(r);for(a=0;n>a;a++)l.push(o(a));return l}}function k(t){var e=+t,n=0;return 0!==e&&isFinite(e)&&(n=e>=0?Math.floor(e):Math.ceil(e)),n}function C(t,e){return new Date(Date.UTC(t,e+1,0)).getUTCDate()}function z(t,e,n){return oe(Te([t,11,31+e-n]),e,n).week}function A(t){return Y(t)?366:365}function Y(t){return t%4===0&&t%100!==0||t%400===0}function O(t){var e;t._a&&-2===t._pf.overflow&&(e=t._a[Ce]<0||t._a[Ce]>11?Ce:t._a[ze]<1||t._a[ze]>C(t._a[ke],t._a[Ce])?ze:t._a[Ae]<0||t._a[Ae]>24||24===t._a[Ae]&&(0!==t._a[Ye]||0!==t._a[Oe]||0!==t._a[xe])?Ae:t._a[Ye]<0||t._a[Ye]>59?Ye:t._a[Oe]<0||t._a[Oe]>59?Oe:t._a[xe]<0||t._a[xe]>999?xe:-1,t._pf._overflowDayOfYear&&(ke>e||e>ze)&&(e=ze),t._pf.overflow=e)}function x(e){return null==e._isValid&&(e._isValid=!isNaN(e._d.getTime())&&e._pf.overflow<0&&!e._pf.empty&&!e._pf.invalidMonth&&!e._pf.nullInput&&!e._pf.invalidFormat&&!e._pf.userInvalidated,e._strict&&(e._isValid=e._isValid&&0===e._pf.charsLeftOver&&0===e._pf.unusedTokens.length&&e._pf.bigHour===t)),e._isValid}function U(t){return t?t.toLowerCase().replace("_","-"):t}function F(t){for(var e,n,i,s,r=0;r<t.length;){for(s=U(t[r]).split("-"),e=s.length,n=U(t[r+1]),n=n?n.split("-"):null;e>0;){if(i=E(s.slice(0,e).join("-")))return i;if(n&&n.length>=e&&v(s,n,!0)>=e-1)break;e--}r++}return null}function E(t){var e=null;if(!Ue[t]&&Ee)try{e=Te.locale(),require("./locale/"+t),Te.locale(e)}catch(n){}return Ue[t]}function P(t,e){var n,i;return e._isUTC?(n=e.clone(),i=(Te.isMoment(t)||M(t)?+t:+Te(t))-+n,n._d.setTime(+n._d+i),Te.updateOffset(n,!1),n):Te(t).local()}function I(t){return t.match(/\[[\s\S]/)?t.replace(/^\[|\]$/g,""):t.replace(/\\/g,"")}function W(t){var e,n,i=t.match(He);for(e=0,n=i.length;n>e;e++)i[e]=gn[i[e]]?gn[i[e]]:I(i[e]);return function(s){var r="";for(e=0;n>e;e++)r+=i[e]instanceof Function?i[e].call(s,t):i[e];return r}}function H(t,e){return t.isValid()?(e=L(e,t.localeData()),dn[e]||(dn[e]=W(e)),dn[e](t)):t.localeData().invalidDate()}function L(t,e){function n(t){return e.longDateFormat(t)||t}var i=5;for(Le.lastIndex=0;i>=0&&Le.test(t);)t=t.replace(Le,n),Le.lastIndex=0,i-=1;return t}function R(t,e){var n,i=e._strict;switch(t){case"Q":return qe;case"DDDD":return Ke;case"YYYY":case"GGGG":case"gggg":return i?tn:Ge;case"Y":case"G":case"g":return nn;case"YYYYYY":case"YYYYY":case"GGGGG":case"ggggg":return i?en:Ne;case"S":if(i)return qe;case"SS":if(i)return Qe;case"SSS":if(i)return Ke;case"DDD":return Ze;case"MMM":case"MMMM":case"dd":case"ddd":case"dddd":return je;case"a":case"A":return e._locale._meridiemParse;case"x":return Be;case"X":return Xe;case"Z":case"ZZ":return Je;case"T":return $e;case"SSSS":return Ve;case"MM":case"DD":case"YY":case"GG":case"gg":case"HH":case"hh":case"mm":case"ss":case"ww":case"WW":return i?Qe:Re;case"M":case"D":case"d":case"H":case"h":case"m":case"s":case"w":case"W":case"e":case"E":return Re;case"Do":return i?e._locale._ordinalParse:e._locale._ordinalParseLenient;default:return n=new RegExp(X(B(t.replace("\\","")),"i"))}}function Z(t){t=t||"";var e=t.match(Je)||[],n=e[e.length-1]||[],i=(n+"").match(un)||["-",0,0],s=+(60*i[1])+k(i[2]);return"+"===i[0]?-s:s}function G(t,e,n){var i,s=n._a;switch(t){case"Q":null!=e&&(s[Ce]=3*(k(e)-1));break;case"M":case"MM":null!=e&&(s[Ce]=k(e)-1);break;case"MMM":case"MMMM":i=n._locale.monthsParse(e,t,n._strict),null!=i?s[Ce]=i:n._pf.invalidMonth=e;break;case"D":case"DD":null!=e&&(s[ze]=k(e));break;case"Do":null!=e&&(s[ze]=k(parseInt(e.match(/\d{1,2}/)[0],10)));break;case"DDD":case"DDDD":null!=e&&(n._dayOfYear=k(e));break;case"YY":s[ke]=Te.parseTwoDigitYear(e);break;case"YYYY":case"YYYYY":case"YYYYYY":s[ke]=k(e);break;case"a":case"A":n._isPm=n._locale.isPM(e);break;case"h":case"hh":n._pf.bigHour=!0;case"H":case"HH":s[Ae]=k(e);break;case"m":case"mm":s[Ye]=k(e);break;case"s":case"ss":s[Oe]=k(e);break;case"S":case"SS":case"SSS":case"SSSS":s[xe]=k(1e3*("0."+e));break;case"x":n._d=new Date(k(e));break;case"X":n._d=new Date(1e3*parseFloat(e));break;case"Z":case"ZZ":n._useUTC=!0,n._tzm=Z(e);break;case"dd":case"ddd":case"dddd":i=n._locale.weekdaysParse(e),null!=i?(n._w=n._w||{},n._w.d=i):n._pf.invalidWeekday=e;break;case"w":case"ww":case"W":case"WW":case"d":case"e":case"E":t=t.substr(0,1);case"gggg":case"GGGG":case"GGGGG":t=t.substr(0,2),e&&(n._w=n._w||{},n._w[t]=k(e));break;case"gg":case"GG":n._w=n._w||{},n._w[t]=Te.parseTwoDigitYear(e)}}function N(t){var n,i,s,r,a,o,u;n=t._w,null!=n.GG||null!=n.W||null!=n.E?(a=1,o=4,i=e(n.GG,t._a[ke],oe(Te(),1,4).year),s=e(n.W,1),r=e(n.E,1)):(a=t._locale._week.dow,o=t._locale._week.doy,i=e(n.gg,t._a[ke],oe(Te(),a,o).year),s=e(n.w,1),null!=n.d?(r=n.d,a>r&&++s):r=null!=n.e?n.e+a:a),u=ue(i,s,r,o,a),t._a[ke]=u.year,t._dayOfYear=u.dayOfYear}function V(t){var n,i,s,r,a=[];if(!t._d){for(s=J(t),t._w&&null==t._a[ze]&&null==t._a[Ce]&&N(t),t._dayOfYear&&(r=e(t._a[ke],s[ke]),t._dayOfYear>A(r)&&(t._pf._overflowDayOfYear=!0),i=ie(r,0,t._dayOfYear),t._a[Ce]=i.getUTCMonth(),t._a[ze]=i.getUTCDate()),n=0;3>n&&null==t._a[n];++n)t._a[n]=a[n]=s[n];for(;7>n;n++)t._a[n]=a[n]=null==t._a[n]?2===n?1:0:t._a[n];24===t._a[Ae]&&0===t._a[Ye]&&0===t._a[Oe]&&0===t._a[xe]&&(t._nextDay=!0,t._a[Ae]=0),t._d=(t._useUTC?ie:ne).apply(null,a),null!=t._tzm&&t._d.setUTCMinutes(t._d.getUTCMinutes()+t._tzm),t._nextDay&&(t._a[Ae]=24)}}function j(t){var e;t._d||(e=w(t._i),t._a=[e.year,e.month,e.day||e.date,e.hour,e.minute,e.second,e.millisecond],V(t))}function J(t){var e=new Date;return t._useUTC?[e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()]:[e.getFullYear(),e.getMonth(),e.getDate()]}function $(e){if(e._f===Te.ISO_8601)return Q(e),void 0;e._a=[],e._pf.empty=!0;var n,i,s,r,a,o=""+e._i,u=o.length,l=0;for(s=L(e._f,e._locale).match(He)||[],n=0;n<s.length;n++)r=s[n],i=(o.match(R(r,e))||[])[0],i&&(a=o.substr(0,o.indexOf(i)),a.length>0&&e._pf.unusedInput.push(a),o=o.slice(o.indexOf(i)+i.length),l+=i.length),gn[r]?(i?e._pf.empty=!1:e._pf.unusedTokens.push(r),G(r,i,e)):e._strict&&!i&&e._pf.unusedTokens.push(r);e._pf.charsLeftOver=u-l,o.length>0&&e._pf.unusedInput.push(o),e._pf.bigHour===!0&&e._a[Ae]<=12&&(e._pf.bigHour=t),e._isPm&&e._a[Ae]<12&&(e._a[Ae]+=12),e._isPm===!1&&12===e._a[Ae]&&(e._a[Ae]=0),V(e),O(e)}function B(t){return t.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(t,e,n,i,s){return e||n||i||s})}function X(t){return t.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function q(t){var e,n,s,r,a;if(0===t._f.length)return t._pf.invalidFormat=!0,t._d=new Date(0/0),void 0;for(r=0;r<t._f.length;r++)a=0,e=f({},t),null!=t._useUTC&&(e._useUTC=t._useUTC),e._pf=i(),e._f=t._f[r],$(e),x(e)&&(a+=e._pf.charsLeftOver,a+=10*e._pf.unusedTokens.length,e._pf.score=a,(null==s||s>a)&&(s=a,n=e));d(t,n||e)}function Q(t){var e,n,i=t._i,s=sn.exec(i);if(s){for(t._pf.iso=!0,e=0,n=an.length;n>e;e++)if(an[e][1].exec(i)){t._f=an[e][0]+(s[6]||" ");break}for(e=0,n=on.length;n>e;e++)if(on[e][1].exec(i)){t._f+=on[e][0];break}i.match(Je)&&(t._f+="Z"),$(t)}else t._isValid=!1}function K(t){Q(t),t._isValid===!1&&(delete t._isValid,Te.createFromInputFallback(t))}function te(t,e){var n,i=[];for(n=0;n<t.length;++n)i.push(e(t[n],n));return i}function ee(e){var n,i=e._i;i===t?e._d=new Date:M(i)?e._d=new Date(+i):null!==(n=Pe.exec(i))?e._d=new Date(+n[1]):"string"==typeof i?K(e):D(i)?(e._a=te(i.slice(0),function(t){return parseInt(t,10)}),V(e)):"object"==typeof i?j(e):"number"==typeof i?e._d=new Date(i):Te.createFromInputFallback(e)}function ne(t,e,n,i,s,r,a){var o=new Date(t,e,n,i,s,r,a);return 1970>t&&o.setFullYear(t),o
}function ie(t){var e=new Date(Date.UTC.apply(null,arguments));return 1970>t&&e.setUTCFullYear(t),e}function se(t,e){if("string"==typeof t)if(isNaN(t)){if(t=e.weekdaysParse(t),"number"!=typeof t)return null}else t=parseInt(t,10);return t}function re(t,e,n,i,s){return s.relativeTime(e||1,!!n,t,i)}function ae(t,e,n){var i=Te.duration(t).abs(),s=we(i.as("s")),r=we(i.as("m")),a=we(i.as("h")),o=we(i.as("d")),u=we(i.as("M")),l=we(i.as("y")),c=s<fn.s&&["s",s]||1===r&&["m"]||r<fn.m&&["mm",r]||1===a&&["h"]||a<fn.h&&["hh",a]||1===o&&["d"]||o<fn.d&&["dd",o]||1===u&&["M"]||u<fn.M&&["MM",u]||1===l&&["y"]||["yy",l];return c[2]=e,c[3]=+t>0,c[4]=n,re.apply({},c)}function oe(t,e,n){var i,s=n-e,r=n-t.day();return r>s&&(r-=7),s-7>r&&(r+=7),i=Te(t).add(r,"d"),{week:Math.ceil(i.dayOfYear()/7),year:i.year()}}function ue(t,e,n,i,s){var r,a,o=ie(t,0,1).getUTCDay();return o=0===o?7:o,n=null!=n?n:s,r=s-o+(o>i?7:0)-(s>o?7:0),a=7*(e-1)+(n-s)+r+1,{year:a>0?t:t-1,dayOfYear:a>0?a:A(t-1)+a}}function le(e){var n,i=e._i,s=e._f;return e._locale=e._locale||Te.localeData(e._l),null===i||s===t&&""===i?Te.invalid({nullInput:!0}):("string"==typeof i&&(e._i=i=e._locale.preparse(i)),Te.isMoment(i)?new c(i,!0):(s?D(s)?q(e):$(e):ee(e),n=new c(e),n._nextDay&&(n.add(1,"d"),n._nextDay=t),n))}function ce(t,e){var n,i;if(1===e.length&&D(e[0])&&(e=e[0]),!e.length)return Te();for(n=e[0],i=1;i<e.length;++i)e[i][t](n)&&(n=e[i]);return n}function he(t,e){var n;return"string"==typeof e&&(e=t.localeData().monthsParse(e),"number"!=typeof e)?t:(n=Math.min(t.date(),C(t.year(),e)),t._d["set"+(t._isUTC?"UTC":"")+"Month"](e,n),t)}function de(t,e){return t._d["get"+(t._isUTC?"UTC":"")+e]()}function fe(t,e,n){return"Month"===e?he(t,n):t._d["set"+(t._isUTC?"UTC":"")+e](n)}function me(t,e){return function(n){return null!=n?(fe(this,t,n),Te.updateOffset(this,e),this):de(this,t)}}function _e(t){return 400*t/146097}function ge(t){return 146097*t/400}function pe(t){Te.duration.fn[t]=function(){return this._data[t]}}function ye(t){"undefined"==typeof ender&&(De=be.moment,be.moment=t?r("Accessing Moment through the global scope is deprecated, and will be removed in an upcoming release.",Te):Te)}for(var Te,De,Me,ve="2.8.4",be="undefined"!=typeof global?global:this,we=Math.round,Se=Object.prototype.hasOwnProperty,ke=0,Ce=1,ze=2,Ae=3,Ye=4,Oe=5,xe=6,Ue={},Fe=[],Ee="undefined"!=typeof module&&module&&module.exports,Pe=/^\/?Date\((\-?\d+)/i,Ie=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,We=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,He=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g,Le=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Re=/\d\d?/,Ze=/\d{1,3}/,Ge=/\d{1,4}/,Ne=/[+\-]?\d{1,6}/,Ve=/\d+/,je=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,Je=/Z|[\+\-]\d\d:?\d\d/gi,$e=/T/i,Be=/[\+\-]?\d+/,Xe=/[\+\-]?\d+(\.\d{1,3})?/,qe=/\d/,Qe=/\d\d/,Ke=/\d{3}/,tn=/\d{4}/,en=/[+-]?\d{6}/,nn=/[+-]?\d+/,sn=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,rn="YYYY-MM-DDTHH:mm:ssZ",an=[["YYYYYY-MM-DD",/[+-]\d{6}-\d{2}-\d{2}/],["YYYY-MM-DD",/\d{4}-\d{2}-\d{2}/],["GGGG-[W]WW-E",/\d{4}-W\d{2}-\d/],["GGGG-[W]WW",/\d{4}-W\d{2}/],["YYYY-DDD",/\d{4}-\d{3}/]],on=[["HH:mm:ss.SSSS",/(T| )\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],un=/([\+\-]|\d\d)/gi,ln=("Date|Hours|Minutes|Seconds|Milliseconds".split("|"),{Milliseconds:1,Seconds:1e3,Minutes:6e4,Hours:36e5,Days:864e5,Months:2592e6,Years:31536e6}),cn={ms:"millisecond",s:"second",m:"minute",h:"hour",d:"day",D:"date",w:"week",W:"isoWeek",M:"month",Q:"quarter",y:"year",DDD:"dayOfYear",e:"weekday",E:"isoWeekday",gg:"weekYear",GG:"isoWeekYear"},hn={dayofyear:"dayOfYear",isoweekday:"isoWeekday",isoweek:"isoWeek",weekyear:"weekYear",isoweekyear:"isoWeekYear"},dn={},fn={s:45,m:45,h:22,d:26,M:11},mn="DDD w W M D d".split(" "),_n="M D H h m s w W".split(" "),gn={M:function(){return this.month()+1},MMM:function(t){return this.localeData().monthsShort(this,t)},MMMM:function(t){return this.localeData().months(this,t)},D:function(){return this.date()},DDD:function(){return this.dayOfYear()},d:function(){return this.day()},dd:function(t){return this.localeData().weekdaysMin(this,t)},ddd:function(t){return this.localeData().weekdaysShort(this,t)},dddd:function(t){return this.localeData().weekdays(this,t)},w:function(){return this.week()},W:function(){return this.isoWeek()},YY:function(){return _(this.year()%100,2)},YYYY:function(){return _(this.year(),4)},YYYYY:function(){return _(this.year(),5)},YYYYYY:function(){var t=this.year(),e=t>=0?"+":"-";return e+_(Math.abs(t),6)},gg:function(){return _(this.weekYear()%100,2)},gggg:function(){return _(this.weekYear(),4)},ggggg:function(){return _(this.weekYear(),5)},GG:function(){return _(this.isoWeekYear()%100,2)},GGGG:function(){return _(this.isoWeekYear(),4)},GGGGG:function(){return _(this.isoWeekYear(),5)},e:function(){return this.weekday()},E:function(){return this.isoWeekday()},a:function(){return this.localeData().meridiem(this.hours(),this.minutes(),!0)},A:function(){return this.localeData().meridiem(this.hours(),this.minutes(),!1)},H:function(){return this.hours()},h:function(){return this.hours()%12||12},m:function(){return this.minutes()},s:function(){return this.seconds()},S:function(){return k(this.milliseconds()/100)},SS:function(){return _(k(this.milliseconds()/10),2)},SSS:function(){return _(this.milliseconds(),3)},SSSS:function(){return _(this.milliseconds(),3)},Z:function(){var t=-this.zone(),e="+";return 0>t&&(t=-t,e="-"),e+_(k(t/60),2)+":"+_(k(t)%60,2)},ZZ:function(){var t=-this.zone(),e="+";return 0>t&&(t=-t,e="-"),e+_(k(t/60),2)+_(k(t)%60,2)},z:function(){return this.zoneAbbr()},zz:function(){return this.zoneName()},x:function(){return this.valueOf()},X:function(){return this.unix()},Q:function(){return this.quarter()}},pn={},yn=["months","monthsShort","weekdays","weekdaysShort","weekdaysMin"];mn.length;)Me=mn.pop(),gn[Me+"o"]=u(gn[Me],Me);for(;_n.length;)Me=_n.pop(),gn[Me+Me]=o(gn[Me],2);gn.DDDD=o(gn.DDD,3),d(l.prototype,{set:function(t){var e,n;for(n in t)e=t[n],"function"==typeof e?this[n]=e:this["_"+n]=e;this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)},_months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),months:function(t){return this._months[t.month()]},_monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),monthsShort:function(t){return this._monthsShort[t.month()]},monthsParse:function(t,e,n){var i,s,r;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),i=0;12>i;i++){if(s=Te.utc([2e3,i]),n&&!this._longMonthsParse[i]&&(this._longMonthsParse[i]=new RegExp("^"+this.months(s,"").replace(".","")+"$","i"),this._shortMonthsParse[i]=new RegExp("^"+this.monthsShort(s,"").replace(".","")+"$","i")),n||this._monthsParse[i]||(r="^"+this.months(s,"")+"|^"+this.monthsShort(s,""),this._monthsParse[i]=new RegExp(r.replace(".",""),"i")),n&&"MMMM"===e&&this._longMonthsParse[i].test(t))return i;if(n&&"MMM"===e&&this._shortMonthsParse[i].test(t))return i;if(!n&&this._monthsParse[i].test(t))return i}},_weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdays:function(t){return this._weekdays[t.day()]},_weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysShort:function(t){return this._weekdaysShort[t.day()]},_weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),weekdaysMin:function(t){return this._weekdaysMin[t.day()]},weekdaysParse:function(t){var e,n,i;for(this._weekdaysParse||(this._weekdaysParse=[]),e=0;7>e;e++)if(this._weekdaysParse[e]||(n=Te([2e3,1]).day(e),i="^"+this.weekdays(n,"")+"|^"+this.weekdaysShort(n,"")+"|^"+this.weekdaysMin(n,""),this._weekdaysParse[e]=new RegExp(i.replace(".",""),"i")),this._weekdaysParse[e].test(t))return e},_longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY LT",LLLL:"dddd, MMMM D, YYYY LT"},longDateFormat:function(t){var e=this._longDateFormat[t];return!e&&this._longDateFormat[t.toUpperCase()]&&(e=this._longDateFormat[t.toUpperCase()].replace(/MMMM|MM|DD|dddd/g,function(t){return t.slice(1)}),this._longDateFormat[t]=e),e},isPM:function(t){return"p"===(t+"").toLowerCase().charAt(0)},_meridiemParse:/[ap]\.?m?\.?/i,meridiem:function(t,e,n){return t>11?n?"pm":"PM":n?"am":"AM"},_calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},calendar:function(t,e,n){var i=this._calendar[t];return"function"==typeof i?i.apply(e,[n]):i},_relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},relativeTime:function(t,e,n,i){var s=this._relativeTime[n];return"function"==typeof s?s(t,e,n,i):s.replace(/%d/i,t)},pastFuture:function(t,e){var n=this._relativeTime[t>0?"future":"past"];return"function"==typeof n?n(e):n.replace(/%s/i,e)},ordinal:function(t){return this._ordinal.replace("%d",t)},_ordinal:"%d",_ordinalParse:/\d{1,2}/,preparse:function(t){return t},postformat:function(t){return t},week:function(t){return oe(t,this._week.dow,this._week.doy).week},_week:{dow:0,doy:6},_invalidDate:"Invalid date",invalidDate:function(){return this._invalidDate}}),Te=function(e,n,s,r){var a;return"boolean"==typeof s&&(r=s,s=t),a={},a._isAMomentObject=!0,a._i=e,a._f=n,a._l=s,a._strict=r,a._isUTC=!1,a._pf=i(),le(a)},Te.suppressDeprecationWarnings=!1,Te.createFromInputFallback=r("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(t){t._d=new Date(t._i+(t._useUTC?" UTC":""))}),Te.min=function(){var t=[].slice.call(arguments,0);return ce("isBefore",t)},Te.max=function(){var t=[].slice.call(arguments,0);return ce("isAfter",t)},Te.utc=function(e,n,s,r){var a;return"boolean"==typeof s&&(r=s,s=t),a={},a._isAMomentObject=!0,a._useUTC=!0,a._isUTC=!0,a._l=s,a._i=e,a._f=n,a._strict=r,a._pf=i(),le(a).utc()},Te.unix=function(t){return Te(1e3*t)},Te.duration=function(t,e){var i,s,r,a,o=t,u=null;return Te.isDuration(t)?o={ms:t._milliseconds,d:t._days,M:t._months}:"number"==typeof t?(o={},e?o[e]=t:o.milliseconds=t):(u=Ie.exec(t))?(i="-"===u[1]?-1:1,o={y:0,d:k(u[ze])*i,h:k(u[Ae])*i,m:k(u[Ye])*i,s:k(u[Oe])*i,ms:k(u[xe])*i}):(u=We.exec(t))?(i="-"===u[1]?-1:1,r=function(t){var e=t&&parseFloat(t.replace(",","."));return(isNaN(e)?0:e)*i},o={y:r(u[2]),M:r(u[3]),d:r(u[4]),h:r(u[5]),m:r(u[6]),s:r(u[7]),w:r(u[8])}):"object"==typeof o&&("from"in o||"to"in o)&&(a=p(Te(o.from),Te(o.to)),o={},o.ms=a.milliseconds,o.M=a.months),s=new h(o),Te.isDuration(t)&&n(t,"_locale")&&(s._locale=t._locale),s},Te.version=ve,Te.defaultFormat=rn,Te.ISO_8601=function(){},Te.momentProperties=Fe,Te.updateOffset=function(){},Te.relativeTimeThreshold=function(e,n){return fn[e]===t?!1:n===t?fn[e]:(fn[e]=n,!0)},Te.lang=r("moment.lang is deprecated. Use moment.locale instead.",function(t,e){return Te.locale(t,e)}),Te.locale=function(t,e){var n;return t&&(n="undefined"!=typeof e?Te.defineLocale(t,e):Te.localeData(t),n&&(Te.duration._locale=Te._locale=n)),Te._locale._abbr},Te.defineLocale=function(t,e){return null!==e?(e.abbr=t,Ue[t]||(Ue[t]=new l),Ue[t].set(e),Te.locale(t),Ue[t]):(delete Ue[t],null)},Te.langData=r("moment.langData is deprecated. Use moment.localeData instead.",function(t){return Te.localeData(t)}),Te.localeData=function(t){var e;if(t&&t._locale&&t._locale._abbr&&(t=t._locale._abbr),!t)return Te._locale;if(!D(t)){if(e=E(t))return e;t=[t]}return F(t)},Te.isMoment=function(t){return t instanceof c||null!=t&&n(t,"_isAMomentObject")},Te.isDuration=function(t){return t instanceof h};for(Me=yn.length-1;Me>=0;--Me)S(yn[Me]);Te.normalizeUnits=function(t){return b(t)},Te.invalid=function(t){var e=Te.utc(0/0);return null!=t?d(e._pf,t):e._pf.userInvalidated=!0,e},Te.parseZone=function(){return Te.apply(null,arguments).parseZone()},Te.parseTwoDigitYear=function(t){return k(t)+(k(t)>68?1900:2e3)},d(Te.fn=c.prototype,{clone:function(){return Te(this)},valueOf:function(){return+this._d+6e4*(this._offset||0)},unix:function(){return Math.floor(+this/1e3)},toString:function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},toDate:function(){return this._offset?new Date(+this):this._d},toISOString:function(){var t=Te(this).utc();return 0<t.year()&&t.year()<=9999?"function"==typeof Date.prototype.toISOString?this.toDate().toISOString():H(t,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):H(t,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")},toArray:function(){var t=this;return[t.year(),t.month(),t.date(),t.hours(),t.minutes(),t.seconds(),t.milliseconds()]},isValid:function(){return x(this)},isDSTShifted:function(){return this._a?this.isValid()&&v(this._a,(this._isUTC?Te.utc(this._a):Te(this._a)).toArray())>0:!1},parsingFlags:function(){return d({},this._pf)},invalidAt:function(){return this._pf.overflow},utc:function(t){return this.zone(0,t)},local:function(t){return this._isUTC&&(this.zone(0,t),this._isUTC=!1,t&&this.add(this._dateTzOffset(),"m")),this},format:function(t){var e=H(this,t||Te.defaultFormat);return this.localeData().postformat(e)},add:y(1,"add"),subtract:y(-1,"subtract"),diff:function(t,e,n){var i,s,r,a=P(t,this),o=6e4*(this.zone()-a.zone());return e=b(e),"year"===e||"month"===e?(i=432e5*(this.daysInMonth()+a.daysInMonth()),s=12*(this.year()-a.year())+(this.month()-a.month()),r=this-Te(this).startOf("month")-(a-Te(a).startOf("month")),r-=6e4*(this.zone()-Te(this).startOf("month").zone()-(a.zone()-Te(a).startOf("month").zone())),s+=r/i,"year"===e&&(s/=12)):(i=this-a,s="second"===e?i/1e3:"minute"===e?i/6e4:"hour"===e?i/36e5:"day"===e?(i-o)/864e5:"week"===e?(i-o)/6048e5:i),n?s:m(s)},from:function(t,e){return Te.duration({to:this,from:t}).locale(this.locale()).humanize(!e)},fromNow:function(t){return this.from(Te(),t)},calendar:function(t){var e=t||Te(),n=P(e,this).startOf("day"),i=this.diff(n,"days",!0),s=-6>i?"sameElse":-1>i?"lastWeek":0>i?"lastDay":1>i?"sameDay":2>i?"nextDay":7>i?"nextWeek":"sameElse";return this.format(this.localeData().calendar(s,this,Te(e)))},isLeapYear:function(){return Y(this.year())},isDST:function(){return this.zone()<this.clone().month(0).zone()||this.zone()<this.clone().month(5).zone()},day:function(t){var e=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?(t=se(t,this.localeData()),this.add(t-e,"d")):e},month:me("Month",!0),startOf:function(t){switch(t=b(t)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===t?this.weekday(0):"isoWeek"===t&&this.isoWeekday(1),"quarter"===t&&this.month(3*Math.floor(this.month()/3)),this},endOf:function(e){return e=b(e),e===t||"millisecond"===e?this:this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms")},isAfter:function(t,e){var n;return e=b("undefined"!=typeof e?e:"millisecond"),"millisecond"===e?(t=Te.isMoment(t)?t:Te(t),+this>+t):(n=Te.isMoment(t)?+t:+Te(t),n<+this.clone().startOf(e))},isBefore:function(t,e){var n;return e=b("undefined"!=typeof e?e:"millisecond"),"millisecond"===e?(t=Te.isMoment(t)?t:Te(t),+t>+this):(n=Te.isMoment(t)?+t:+Te(t),+this.clone().endOf(e)<n)},isSame:function(t,e){var n;return e=b(e||"millisecond"),"millisecond"===e?(t=Te.isMoment(t)?t:Te(t),+this===+t):(n=+Te(t),+this.clone().startOf(e)<=n&&n<=+this.clone().endOf(e))},min:r("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(t){return t=Te.apply(null,arguments),this>t?this:t}),max:r("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(t){return t=Te.apply(null,arguments),t>this?this:t}),zone:function(t,e){var n,i=this._offset||0;return null==t?this._isUTC?i:this._dateTzOffset():("string"==typeof t&&(t=Z(t)),Math.abs(t)<16&&(t=60*t),!this._isUTC&&e&&(n=this._dateTzOffset()),this._offset=t,this._isUTC=!0,null!=n&&this.subtract(n,"m"),i!==t&&(!e||this._changeInProgress?T(this,Te.duration(i-t,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,Te.updateOffset(this,!0),this._changeInProgress=null)),this)},zoneAbbr:function(){return this._isUTC?"UTC":""},zoneName:function(){return this._isUTC?"Coordinated Universal Time":""},parseZone:function(){return this._tzm?this.zone(this._tzm):"string"==typeof this._i&&this.zone(this._i),this},hasAlignedHourOffset:function(t){return t=t?Te(t).zone():0,(this.zone()-t)%60===0},daysInMonth:function(){return C(this.year(),this.month())},dayOfYear:function(t){var e=we((Te(this).startOf("day")-Te(this).startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"d")},quarter:function(t){return null==t?Math.ceil((this.month()+1)/3):this.month(3*(t-1)+this.month()%3)},weekYear:function(t){var e=oe(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==t?e:this.add(t-e,"y")},isoWeekYear:function(t){var e=oe(this,1,4).year;return null==t?e:this.add(t-e,"y")},week:function(t){var e=this.localeData().week(this);return null==t?e:this.add(7*(t-e),"d")},isoWeek:function(t){var e=oe(this,1,4).week;return null==t?e:this.add(7*(t-e),"d")},weekday:function(t){var e=(this.day()+7-this.localeData()._week.dow)%7;return null==t?e:this.add(t-e,"d")},isoWeekday:function(t){return null==t?this.day()||7:this.day(this.day()%7?t:t-7)},isoWeeksInYear:function(){return z(this.year(),1,4)},weeksInYear:function(){var t=this.localeData()._week;return z(this.year(),t.dow,t.doy)},get:function(t){return t=b(t),this[t]()},set:function(t,e){return t=b(t),"function"==typeof this[t]&&this[t](e),this},locale:function(e){var n;return e===t?this._locale._abbr:(n=Te.localeData(e),null!=n&&(this._locale=n),this)},lang:r("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return e===t?this.localeData():this.locale(e)}),localeData:function(){return this._locale},_dateTzOffset:function(){return 15*Math.round(this._d.getTimezoneOffset()/15)}}),Te.fn.millisecond=Te.fn.milliseconds=me("Milliseconds",!1),Te.fn.second=Te.fn.seconds=me("Seconds",!1),Te.fn.minute=Te.fn.minutes=me("Minutes",!1),Te.fn.hour=Te.fn.hours=me("Hours",!0),Te.fn.date=me("Date",!0),Te.fn.dates=r("dates accessor is deprecated. Use date instead.",me("Date",!0)),Te.fn.year=me("FullYear",!0),Te.fn.years=r("years accessor is deprecated. Use year instead.",me("FullYear",!0)),Te.fn.days=Te.fn.day,Te.fn.months=Te.fn.month,Te.fn.weeks=Te.fn.week,Te.fn.isoWeeks=Te.fn.isoWeek,Te.fn.quarters=Te.fn.quarter,Te.fn.toJSON=Te.fn.toISOString,d(Te.duration.fn=h.prototype,{_bubble:function(){var t,e,n,i=this._milliseconds,s=this._days,r=this._months,a=this._data,o=0;a.milliseconds=i%1e3,t=m(i/1e3),a.seconds=t%60,e=m(t/60),a.minutes=e%60,n=m(e/60),a.hours=n%24,s+=m(n/24),o=m(_e(s)),s-=m(ge(o)),r+=m(s/30),s%=30,o+=m(r/12),r%=12,a.days=s,a.months=r,a.years=o},abs:function(){return this._milliseconds=Math.abs(this._milliseconds),this._days=Math.abs(this._days),this._months=Math.abs(this._months),this._data.milliseconds=Math.abs(this._data.milliseconds),this._data.seconds=Math.abs(this._data.seconds),this._data.minutes=Math.abs(this._data.minutes),this._data.hours=Math.abs(this._data.hours),this._data.months=Math.abs(this._data.months),this._data.years=Math.abs(this._data.years),this},weeks:function(){return m(this.days()/7)},valueOf:function(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*k(this._months/12)},humanize:function(t){var e=ae(this,!t,this.localeData());return t&&(e=this.localeData().pastFuture(+this,e)),this.localeData().postformat(e)},add:function(t,e){var n=Te.duration(t,e);return this._milliseconds+=n._milliseconds,this._days+=n._days,this._months+=n._months,this._bubble(),this},subtract:function(t,e){var n=Te.duration(t,e);return this._milliseconds-=n._milliseconds,this._days-=n._days,this._months-=n._months,this._bubble(),this},get:function(t){return t=b(t),this[t.toLowerCase()+"s"]()},as:function(t){var e,n;if(t=b(t),"month"===t||"year"===t)return e=this._days+this._milliseconds/864e5,n=this._months+12*_e(e),"month"===t?n:n/12;switch(e=this._days+Math.round(ge(this._months/12)),t){case"week":return e/7+this._milliseconds/6048e5;case"day":return e+this._milliseconds/864e5;case"hour":return 24*e+this._milliseconds/36e5;case"minute":return 24*e*60+this._milliseconds/6e4;case"second":return 24*e*60*60+this._milliseconds/1e3;case"millisecond":return Math.floor(24*e*60*60*1e3)+this._milliseconds;default:throw new Error("Unknown unit "+t)}},lang:Te.fn.lang,locale:Te.fn.locale,toIsoString:r("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",function(){return this.toISOString()}),toISOString:function(){var t=Math.abs(this.years()),e=Math.abs(this.months()),n=Math.abs(this.days()),i=Math.abs(this.hours()),s=Math.abs(this.minutes()),r=Math.abs(this.seconds()+this.milliseconds()/1e3);return this.asSeconds()?(this.asSeconds()<0?"-":"")+"P"+(t?t+"Y":"")+(e?e+"M":"")+(n?n+"D":"")+(i||s||r?"T":"")+(i?i+"H":"")+(s?s+"M":"")+(r?r+"S":""):"P0D"},localeData:function(){return this._locale}}),Te.duration.fn.toString=Te.duration.fn.toISOString;for(Me in ln)n(ln,Me)&&pe(Me.toLowerCase());Te.duration.fn.asMilliseconds=function(){return this.as("ms")},Te.duration.fn.asSeconds=function(){return this.as("s")},Te.duration.fn.asMinutes=function(){return this.as("m")},Te.duration.fn.asHours=function(){return this.as("h")},Te.duration.fn.asDays=function(){return this.as("d")},Te.duration.fn.asWeeks=function(){return this.as("weeks")},Te.duration.fn.asMonths=function(){return this.as("M")},Te.duration.fn.asYears=function(){return this.as("y")},Te.locale("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(t){var e=t%10,n=1===k(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th";return t+n}}),Ee?module.exports=Te:"function"==typeof define&&define.amd?(define("moment",function(t,e,n){return n.config&&n.config()&&n.config().noGlobal===!0&&(be.moment=De),Te}),ye(!0)):ye()}.call(this),"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","components/rv-common-i18n/dist/locales/translation_").constant("LOCALES_SUFIX",".json"),"undefined"==typeof config)var config={zoneFileBasePath:"../src/timezone"};var RiseVision=RiseVision||{};RiseVision.WorldClock={},RiseVision.WorldClock=function(t,e){"use strict";function n(){var t="",n=$(".container"),s=c.placement;c.showTitle&&(t=$("<div id='title' class='title'></div>"),t.text(c.title),t.addClass(l+" "+s),t.css("padding",c.padding+"px"),"top"===s||"bottom"===s?(t.addClass("halign-"+c.horizontalAlign),"top"===s?n.prepend(t):n.append(t)):(t.addClass("valign-"+c.verticalAlign),"middle"===c.verticalAlign&&(t.css("line-height",c.rsH-2*c.padding+"px"),n.css("text-align","left")),n.prepend(t))),timezoneJS.timezone.zoneFileBasePath=e.zoneFileBasePath,timezoneJS.timezone.init({async:!1}),"analog"===l?(h=new RiseVision.WorldClock.Analog(c),h.init(),$(".digital-clock").hide()):(d=new RiseVision.WorldClock.Digital(c),d.init(),$(".analog-clock").hide()),document.body.style.background=c.background.color,i()}function i(){t.rpc.call("","rsevent_ready",null,u.getString("id"),!0,!0,!0,!0,!1)}function s(t,e){if(Array.isArray(t)&&t.length>0&&"additionalParams"===t[0]&&Array.isArray(e)&&e.length>0){c=JSON.parse(e[0]),l=c.clockType,c.rsW=u.getString("rsW"),c.rsH=u.getString("rsH"),$(".container").width(c.rsW).height(c.rsH);var i=[{"class":"title",fontSetting:c.titleFont},{"class":"analog-clock",fontSetting:c.analogFont},{"class":"digital-clock",fontSetting:c.digitalFont}];RiseVision.Common.Utilities.loadFonts(i),n()}}function r(){"analog"===l?h.drawAnalog():d.drawDigital()}function a(){"analog"===l?h.pause():d.pause()}function o(){a()}var u=new t.Prefs,l="digital",c=null,h=null,d=null;return{setParams:s,play:r,pause:a,stop:o}}(gadgets,config);var RiseVision=RiseVision||{};RiseVision.WorldClock=RiseVision.WorldClock||{},RiseVision.WorldClock.Analog={},RiseVision.WorldClock.Analog=function(t){"use strict";function e(){var e=$(".container"),n=$("#title"),i=$(".analog-clock"),s=document.getElementById("analog"),o=t.placement,u=t.rsW,l=t.rsH,c=t.analogFont;e.width(u).height(l),t.showTitle?"top"===o||"bottom"===o?(r=l-n.outerHeight(),r>u&&(r=u),s.width=r,s.height=r,e.addClass("halign-center")):("middle"===t.verticalAlign?(r=u-n.outerWidth(),r>l&&(r=l),i.addClass("valign"),i.css("margin-top",-r/2+"px")):(r=l-n.outerHeight(),r>u&&(r=u),e.addClass("halign-center")),s.width=r,s.height=r):(u>l?(r=l,e.addClass("halign-center")):l>u?(r=u,i.css("margin-top",l/2-r/2+"px")):r=u,s.width=r,s.height=r),a=c.bold?"bold ":"",a+=c.italic?"italic ":"",a+=c.size+"px ",a+=c.font.family}function n(){var e=0,i=0,o=0,u=0,l=0,c=0,h=0,d=0,f=0,m=0,_=0,g=0,p=null,y=null,T=document.getElementById("analog");if(T.getContext){p=T.getContext("2d"),p.clearRect(0,0,r,r),p.font=a,p.textBaseline="middle",p.textAlign="center",p.lineWidth=1,p.save(),p.strokeStyle=t.frameColor,p.fillStyle=t.faceColor,p.lineWidth=t.frameWidth,p.beginPath(),p.arc(r/2,r/2,r/2-t.frameWidth/2,0,2*Math.PI,!0),p.fill(),p.stroke(),p.strokeStyle=t.analogFont.color,p.fillStyle=t.analogFont.color,p.save(),p.translate(r/2,r/2);for(var D=1;60>=D;D++)e=Math.PI/30*D,i=Math.sin(e),o=Math.cos(e),D%5===0?(p.lineWidth=t.hourTickWidth,u=i*r/2.9,l=o*-r/2.9,c=i*r/2.3,h=o*-r/2.3,d=i*r/3.55,f=o*-r/3.55,p.fillText(D/5,d,f)):t.minuteTickWidth>0&&(p.lineWidth=t.minuteTickWidth,u=i*r/2.5,l=o*r/2.5,c=i*r/2.3,h=o*r/2.3),p.beginPath(),p.moveTo(u,l),p.lineTo(c,h),p.stroke();y=t.useLocalTime?new Date:new timezoneJS.Date(new Date,t.timeZone),m=y.getHours(),_=y.getMinutes(),g=y.getSeconds(),p.strokeStyle=t.handColor,p.lineWidth=t.handWidth,p.save(),p.rotate(Math.PI/6*(m+_/60+g/3600)),p.beginPath(),p.moveTo(0,r/30),p.lineTo(0,-r/5),p.stroke(),p.restore(),p.save(),p.rotate(Math.PI/30*(_+g/60)),p.beginPath(),p.moveTo(0,r/15),p.lineTo(0,-r/2.5),p.stroke(),p.restore(),p.save(),t.showSecondHand&&(p.rotate(Math.PI/30*g),p.strokeStyle=t.secondHandColor,p.lineWidth=t.secondHandWidth,p.beginPath(),p.moveTo(0,r/15),p.lineTo(0,-r/2.5),p.stroke()),p.restore(),p.restore(),s=setTimeout(function(){n()},1e3)}}function i(){clearTimeout(s)}var s=0,r=0,a="";return{init:e,drawAnalog:n,pause:i}};var RiseVision=RiseVision||{};RiseVision.WorldClock=RiseVision.WorldClock||{},RiseVision.WorldClock.Digital={},RiseVision.WorldClock.Digital=function(t){"use strict";function e(){var e=parseInt(c.css("font-size")),n=t.rsW;for("left"!==u&&"right"!==u||"middle"!==t.verticalAlign||l.length>0&&(n-=$("#title").outerWidth()),"standard-seconds"===o?c.html("00:00:00 AM"):"standard"===o?c.html("00:00 AM"):"military-seconds"===o?c.html("00:00:00"):c.html("00:00");document.getElementById("digital").offsetWidth<n&&document.getElementById("digital").offsetHeight<a;)c.css("font-size",++e);c.css("font-size",--e)}function n(){e(),t.showTitle?"top"===u||"bottom"===u?l.length>0?c.css("line-height",a-l.outerHeight()+"px"):c.css("line-height",a+"px"):c.css("line-height",a+"px"):c.css("line-height",a+"px")}function i(){var e=t.useLocalTime?new Date:new timezoneJS.Date(new Date,t.timeZone);"standard-seconds"===o?c.html(moment(e).format("h:mm:ss A")):"standard"===o?c.html(moment(e).format("h:mm A")):"military-seconds"===o?c.html(moment(e).format("H:mm:ss")):c.html(moment(e).format("H:mm")),r=setTimeout(function(){i()},1e3)}function s(){clearTimeout(r)}var r,a=t.rsH,o=t.format,u=t.placement,l=$("#title"),c=$(".digital-clock");return{init:n,drawDigital:i,pause:s}},function(t,e,n){"use strict";function i(){RiseVision.WorldClock.play()}function s(){RiseVision.WorldClock.pause()}function r(){RiseVision.WorldClock.stop()}var a=new n.Prefs,o=a.getString("id");t.oncontextmenu=function(){return!1},e.body.onmousedown=function(){return!1},o&&(n.rpc.register("rscmd_play_"+o,i),n.rpc.register("rscmd_pause_"+o,s),n.rpc.register("rscmd_stop_"+o,r),n.rpc.register("rsparam_set_"+o,RiseVision.WorldClock.setParams),n.rpc.call("","rsparam_get",null,o,["additionalParams"]))}(window,document,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-41395348-13"]),_gaq.push(["_trackPageview"]),function(){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var e=document.getElementsByTagName("script")[0];e.parentNode.insertBefore(t,e)}();
//# sourceMappingURL=data:application/json;base64,